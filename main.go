package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"

	"demo/model"
)

var (
	filePaths     string = ""
	uuid          string = ""
	name          string
	count         int    = 0
	Filecount     int    = 0
	fileName      string = "/AllData.csv"
	VersionInfo          = ""
	SocketError          = ""
	Time                 = ""
	UserID               = ""
	DeviceID             = ""
	CurrentLine          = ""
	ApiSpeed             = ""
	ContractSpeed        = ""
	LaunchTime           = ""
	NetError             = ""
	URL                  = ""
	AppStatus            = ""
	Name                 = ""
)

func main() {
	filePaths = getAbsPath() //檔案路徑
	checkNumber()
	checkFileName()

	csvFile, err := os.Create(filePaths + fileName) //產生新的檔名
	if err != nil {
		panic(err)
	}
	defer csvFile.Close()
	file, err := os.Open(filePaths + "/weex.csv") //讀取原始檔案

	if err != nil {
		log.Fatalf("Error when opening file: %s", err)
	}

	readFile := csv.NewReader(file)
	readFile.Comma = ','          // 以何種字元作分隔，預設為`,`
	readFile.FieldsPerRecord = -1 //防止錯誤
	csvFile.Seek(0, io.SeekEnd)
	csvFile.WriteString("\xEF\xBB\xBF") // 寫入UTF-8 防止中文亂碼
	writer := csv.NewWriter(csvFile)
	writer.Comma = ','
	writer.UseCRLF = true
	for {
		record, err := readFile.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalln(err)
		}

		var deviceIdentifiers = record[4]
		var deviceModel = record[5]
		var deviceSubModel = record[6]
		var eventName = record[8]
		var eventParameters = record[10]

		// csvFile.Seek(0, io.SeekEnd)
		// csvFile.WriteString("\xEF\xBB\xBF") // 寫入UTF-8 防止中文亂碼
		// writer := csv.NewWriter(csvFile)
		// writer.Comma = ','
		// writer.UseCRLF = true
		StrContainers := strings.Contains(eventName, "Flurry") //排除系統預設事件,空的 Parameter
		if StrContainers || len(eventParameters) < 5 {
			continue
		}
		if name == "1" && count != 0 {
			name1 := strings.Contains(eventName, "LaunchTime")
			if !name1 {
				continue
			}
		}
		if name == "2" && count != 0 {
			name2 := strings.Contains(eventName, "NetError")
			if !name2 {
				continue
			}
		}
		if name == "3" && count != 0 {
			name3 := strings.Contains(eventName, "SocketError")
			if !name3 {
				continue
			}
		}
		if name == "4" && count != 0 {
			name4 := strings.Contains(eventName, "AndroidSpeed")
			if !name4 {
				continue
			}
		}
		if name == "5" && count != 0 {
			name5 := strings.Contains(eventName, "AppStatus")
			if !name5 {
				continue
			}
		}

		if name == "6" && count != 0 {
			name6 := strings.Contains(eventName, "onClick")
			if !name6 {
				continue
			}
		}

		var responseDatas model.AutoGenerated
		err2 := json.Unmarshal([]byte(eventParameters), &responseDatas)
		if err2 != nil {
			// fmt.Println(err)
		}
		// fmt.Println("Time:", responseDatas.Time)
		if responseDatas.Time == "" {
			VersionInfo = "VersionInfo"
			SocketError = "SocketError"
			Time = "Time"
			UserID = "UserID"
			DeviceID = "DeviceID"
			CurrentLine = "CurrentLine"
			ApiSpeed = "ApiSpeed"
			ContractSpeed = "ContractSpeed"
			LaunchTime = "LaunchTime"
			NetError = "NetError"
			URL = "URL"
			AppStatus = "AppStatus"
			Name = "Name"
		} else {
			VersionInfo = responseDatas.VersionInfo
			SocketError = responseDatas.SocketError
			Time = responseDatas.Time
			UserID = responseDatas.UserID
			DeviceID = responseDatas.DeviceID
			CurrentLine = responseDatas.CurrentLine
			ApiSpeed = responseDatas.ApiSpeed
			ContractSpeed = responseDatas.ContractSpeed
			LaunchTime = responseDatas.LaunchTime
			NetError = responseDatas.NetError
			URL = responseDatas.URL
			AppStatus = responseDatas.AppStatus
			Name = responseDatas.Name
		}
		// fmt.Println("deviceIdentifiers :", deviceIdentifiers)
		var responseDatas2 model.DeviceIdentifiers
		err3 := json.Unmarshal([]byte(deviceIdentifiers), &responseDatas2)
		if err3 != nil {
			// fmt.Println(err3)
		}
		//寫入 csv 標頭
		if count == 0 {
			if name == "3" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, eventParameters, VersionInfo, SocketError, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name}}
				writer.WriteAll(txt)
				// writer.Flush()
			} else {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, eventParameters, VersionInfo, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name}}
				writer.WriteAll(txt)
				// writer.Flush()
			}

		}
		//寫入指定 userid 資料
		if uuid == UserID && len(Time) != 0 {
			Filecount = Filecount + 1
			// fmt.Println("Filecount :", Filecount)
			if name == "3" {
				txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, eventParameters, VersionInfo, SocketError, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name}}
				writer.WriteAll(txt)
				// writer.Flush()
			} else {
				// fmt.Println("Time :", Time)
				txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, eventParameters, VersionInfo, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name}}
				writer.WriteAll(txt)
				// writer.Flush()
			}
		} else if uuid == "root" {
			// fmt.Println("Time2 :", len(Time))
			Filecount = Filecount + 1
			txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, eventParameters, VersionInfo, SocketError, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name}}
			writer.WriteAll(txt)
			// writer.Flush()
		}
		count = count + 1
	}
	writer.Flush()
	file.Close()

	if Filecount == 0 {
		fmt.Println("找不到此 Userid :", uuid)
		err := os.Remove(filePaths + fileName) //删除文件
		if err != nil {
			//如果删除失败则输出 file remove Error!
			fmt.Println("File Remove Error!")
			//输出错误详细信息
			fmt.Printf("%s", err)
		} else {
			//如果删除成功则输出 file remove OK!
			fmt.Print("File Remove OK!")

		}
	}
}

func getWorkingDirPath() string { //開發模式路徑
	dir, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	// fmt.Println("workingDirPath:", dir)
	return dir
}

func getAbsPath() string {
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		panic(err)
	}
	// fmt.Println("absPath:", dir)
	return dir
}

func getExePath() string {
	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	exePath := filepath.Dir(ex)
	// fmt.Println("exePath:", exePath)
	return exePath
}

func checkNumber() {
	for {
		fmt.Printf("版本:1.0.1\n")
		fmt.Printf("請輸入要查詢的 UserId: ")
		fmt.Scanln(&uuid)

		if uuid != "" {
			break
		}
	}
	fmt.Println("查詢的 Userid:", uuid)
	for {
		fmt.Printf("1.LaunchTime\n2.NetError\n3.SocketError\n4.AndroidSpeed\n5.AppStatus\n6.onClick\n")
		fmt.Printf("請輸入要輸出的類型號碼: ")
		fmt.Scanln(&name)

		if name != "" {
			break
		}
	}
	fmt.Println(name)
}

func checkFileName() {
	if name == "1" {
		fileName = "/LaunchTime_" + uuid + ".csv"
	}
	if name == "2" {
		fileName = "/NetError_" + uuid + ".csv"
	}
	if name == "3" {
		fileName = "/SocketError_" + uuid + ".csv"
	}
	if name == "4" {
		fileName = "/AndroidSpeed_" + uuid + ".csv"
	}
	if name == "5" {
		fileName = "/AppStatus_" + uuid + ".csv"
	}
	if name == "6" {
		fileName = "/onClick_" + uuid + ".csv"
	}
}
