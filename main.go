package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"

	"demo/model"
)

var (
	filePaths       string = ""
	uuid            string = ""
	name            string
	count           int    = 0
	Filecount       int    = 0
	fileName        string = "/AllData.csv"
	fileName2       string = "/AllData.csv"
	VersionInfo            = ""
	SocketError            = ""
	Time                   = ""
	UserID                 = ""
	DeviceID               = ""
	CurrentLine            = ""
	ApiSpeed               = ""
	ContractSpeed          = ""
	LaunchTime             = ""
	NetError               = ""
	URL                    = ""
	AppStatus              = ""
	Name                   = ""
	OnClick                = ""
	EventID                = ""
	ApiCallTime            = ""
	ApiResponseTime        = ""
	error300Report         = ""
)

func main() {
	filePaths = getAbsPath() //檔案路徑
	checkNumber()
	checkFileName()

	csvFile, err := os.Create(filePaths + fileName)   //產生新的檔名
	csvFile2, err := os.Create(filePaths + fileName2) //產生新的檔名
	if err != nil {
		panic(err)
	}
	defer csvFile.Close()
	file, err := os.Open(filePaths + "/weex.csv") //讀取原始檔案

	if err != nil {
		log.Fatalf("Error when opening file: %s", err)
	}
	//weexraw

	readFile := csv.NewReader(file)
	readFile.Comma = ','          // 以何種字元作分隔，預設為`,`
	readFile.FieldsPerRecord = -1 //防止錯誤
	csvFile.Seek(0, io.SeekEnd)
	csvFile.WriteString("\xEF\xBB\xBF") // 寫入UTF-8 防止中文亂碼
	writer := csv.NewWriter(csvFile)
	writer.Comma = ','
	writer.UseCRLF = true

	csvFile2.Seek(0, io.SeekEnd)
	csvFile2.WriteString("\xEF\xBB\xBF") // 寫入UTF-8 防止中文亂碼
	writer2 := csv.NewWriter(csvFile2)
	writer2.Comma = ','
	writer2.UseCRLF = true

	// s := []string{"hello", "world", "hello", "golang", "hello", "ruby", "php", "java"}
	// countList := []int{}

	//儲存key
	resultObj := map[string]interface{}{}
	// allList := map[string]interface{}{}
	// fmt.Println(removeDuplicateElement(s))
	for {
		record, err := readFile.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalln(err)
		}

		var deviceIdentifiers = record[4]
		var deviceModel = record[5]
		var deviceSubModel = record[6]
		var eventName = record[8]
		var eventParameters = record[10]

		// csvFile.Seek(0, io.SeekEnd)
		// csvFile.WriteString("\xEF\xBB\xBF") // 寫入UTF-8 防止中文亂碼
		// writer := csv.NewWriter(csvFile)
		// writer.Comma = ','
		// writer.UseCRLF = true
		StrContainers := strings.Contains(eventName, "Flurry") //排除系統預設事件,空的 Parameter
		if StrContainers || len(eventParameters) < 5 {
			continue
		}
		if name == "1" && count != 0 {
			name1 := strings.Contains(eventName, "LaunchTime")
			if !name1 {
				continue
			}
		}
		if name == "2" && count != 0 {
			name2 := strings.Contains(eventName, "NetError")
			if !name2 {
				continue
			}
		}
		if name == "3" && count != 0 {
			name3 := strings.Contains(eventName, "SocketError")
			if !name3 {
				continue
			}
		}
		if name == "4" && count != 0 {
			name4 := strings.Contains(eventName, "AndroidSpeed")
			if !name4 {
				continue
			}
		}
		if name == "5" && count != 0 {
			name5 := strings.Contains(eventName, "AppStatus")
			if !name5 {
				continue
			}
		}

		if name == "6" && count != 0 {
			name6 := strings.Contains(eventName, "onClick")
			if !name6 {
				continue
			}
		}

		var responseDatas model.AutoGenerated
		err2 := json.Unmarshal([]byte(eventParameters), &responseDatas)
		if err2 != nil {
			// fmt.Println(err)
		}
		// fmt.Println("Time:", responseDatas.Time)
		if count == 0 {
			VersionInfo = "VersionInfo"
			SocketError = "SocketError"
			Time = "Time"
			UserID = "UserID"
			DeviceID = "DeviceID"
			CurrentLine = "CurrentLine"
			ApiSpeed = "ApiSpeed"
			ContractSpeed = "ContractSpeed"
			LaunchTime = "LaunchTime"
			NetError = "NetError"
			URL = "URL"
			AppStatus = "AppStatus"
			Name = "Name"
			OnClick = "OnClick"
			EventID = "eventID"
			ApiCallTime = "ApiCallTime"
			ApiResponseTime = "ApiResponseTime"
			error300Report = "error300Report"

		} else {
			VersionInfo = responseDatas.VersionInfo
			SocketError = responseDatas.SocketError
			Time = responseDatas.Time
			UserID = responseDatas.UserID
			DeviceID = responseDatas.DeviceID
			CurrentLine = responseDatas.CurrentLine
			ApiSpeed = responseDatas.ApiSpeed
			ContractSpeed = responseDatas.ContractSpeed
			LaunchTime = responseDatas.LaunchTime
			NetError = responseDatas.NetError
			URL = responseDatas.URL
			AppStatus = responseDatas.AppStatus
			Name = responseDatas.Name
			OnClick = responseDatas.OnClick
			EventID = responseDatas.EventID
			ApiCallTime = responseDatas.ApiCallTime
			ApiResponseTime = responseDatas.ResponseTime
			error300Report = responseDatas.Error300Report
		}
		// fmt.Println("deviceIdentifiers :", deviceIdentifiers)
		var responseDatas2 model.DeviceIdentifiers
		err3 := json.Unmarshal([]byte(deviceIdentifiers), &responseDatas2)
		if err3 != nil {
			// fmt.Println(err3)
		}
		//寫入 csv 標頭
		// fmt.Println("count :", count)
		if count == 0 {
			if name == "3" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, SocketError, UserID, DeviceID, URL, Name}}
				writer.WriteAll(txt)

				// writer.Flush()
			} else if name == "1" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, LaunchTime, URL, Name}}
				writer.WriteAll(txt)

				// writer.Flush()
			} else if name == "2" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, NetError, URL, Name}}
				writer.WriteAll(txt)

				// writer.Flush()
			} else if name == "7" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiCallTime}}
				writer.WriteAll(txt)

				// writer.Flush()
			} else if name == "8" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime}}
				writer.WriteAll(txt)

				txt2 := [][]string{{"apiurl", "apiMaxTime", "apiMiniTime", "apiAverageTime", "gwMaxTime", "gwMiniTime", "gwAverageTime", "count", "api90%", "api95%", "api99%", "gw90%", "gw95%", "gw99%"}}
				writer2.WriteAll(txt2)

			} else if name == "9" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, error300Report}}
				writer.WriteAll(txt)
				// writer.Flush()

			} else if name == "10" {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime}}
				writer.WriteAll(txt)

				txt2 := [][]string{{"apiurl", "apiMaxTime", "apiMiniTime", "apiAverageTime", "gwMaxTime", "gwMiniTime", "gwAverageTime", "count", "api90%", "api95%", "api99%", "gw90%", "gw95%", "gw99%"}}
				writer2.WriteAll(txt2)

			} else {
				// fmt.Println("count :", count)
				txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, NetError, URL, Name, EventID, ApiCallTime, ApiResponseTime, error300Report}}
				writer.WriteAll(txt)
				// writer.Flush()

			}
			count = count + 1
		}
		//寫入指定 userid 資料
		if uuid == UserID && len(Time) != 0 {
			Filecount = Filecount + 1
			// fmt.Println("Filecount :", Filecount)
			// fmt.Println("name :", name)
			if name == "3" {
				if eventName == "SocketError" {
					txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, SocketError, UserID, DeviceID, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "1" {
				if eventName == "LaunchTime" {
					txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, LaunchTime, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "2" {
				if eventName == "NetError" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, NetError, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "7" {
				if eventName == "ApiCallTime" {
					fmt.Println("ApiResponseTime :", ApiCallTime)
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiCallTime, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "8" {
				// str1 := strings.Split(VersionInfo, ".")
				// fmt.Println("ver :", str1[len(str1)-1])
				// if eventName == "ApiResponseTime" || eventName == "ServerResponseTime" {
				if eventName == "ServerResponseTime" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "9" {
				if eventName == "error300Report" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, error300Report, eventParameters}}
					writer.WriteAll(txt)
				}
			} else {
				// fmt.Println("Time :", Time)
				txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, NetError, URL, Name, EventID, ApiCallTime, ApiResponseTime, error300Report, eventParameters}}
				writer.WriteAll(txt)
				// writer.Flush()
			}
		} else if uuid == "root" && len(Time) != 0 {
			// fmt.Println("name :", name)
			Filecount = Filecount + 1
			// txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, SocketError, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, LaunchTime, NetError, URL, Name, EventID, eventParameters, ApiCallTime, ApiResponseTime, error300Report}}
			// writer.WriteAll(txt)
			if name == "3" {
				if eventName == "SocketError" {
					txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, SocketError, UserID, DeviceID, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "1" {
				if eventName == "LaunchTime" {
					txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, LaunchTime, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "2" {
				if eventName == "NetError" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, NetError, URL, Name, eventParameters}}
					writer.WriteAll(txt)
				}
			} else if name == "7" {
				if eventName == "ApiCallTime" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiCallTime, eventParameters}}
					writer.WriteAll(txt)
				}
				// txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiCallTime, eventParameters}}
				// writer.WriteAll(txt)
			} else if name == "8" {
				// str1 := strings.Split(VersionInfo, ".")
				// strall := str1[len(str1)-1]
				// trimStr := strings.TrimSpace(strall)
				// marks2, err := strconv.Atoi(trimStr)
				// fmt.Println("marks2=", marks2)
				if err != nil {
					// fmt.Println("Error during conversion= ", err)
					// return
				}
				// fmt.Println("ver :", str1[len(str1)-1])
				// if marks2 >= 28 { //android
				// if marks2 >= 17 { //ios
				// if eventName == "ApiResponseTime" || eventName == "ServerResponseTime" {
				if eventName == "ServerResponseTime" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime, eventParameters}}
					writer.WriteAll(txt)

					var responseDatas3 model.ApiCallUrl
					err4 := json.Unmarshal([]byte(eventParameters), &responseDatas3)
					if err4 != nil {
						// fmt.Println(err3)
					}
					// fmt.Println("eventName=", eventName)
					// marksStr := "320"
					// marks, err := strconv.Atoi(responseDatas3.SubtractTime) //Android
					marks, err := strconv.Atoi(responseDatas3.Res_subtract) //iOS

					// fmt.Println("resgw= ", responseDatas3.Res_gw)
					resgw, err9 := strconv.Atoi(responseDatas3.Res_gw) //Android & iOS

					// fmt.Println("responseDatas3.ApiCallUrl= ", responseDatas3.ApiCallUrl)
					// fmt.Println("marks=", marks)
					if err != nil {
						// fmt.Println("Error during conversion")
						// return
					}
					if err9 != nil {
						// fmt.Println("Error during conversion")
						// return
					}

					if strings.Contains(responseDatas3.ApiCallUrl, "health") || strings.Contains(responseDatas3.ApiCallUrl, "stopService") || strings.Contains(responseDatas3.ApiCallUrl, "legal/order/detail") || strings.Contains(responseDatas3.ApiCallUrl, "getChannelcodeFromVipcode") {

					} else {
						if marks == 0 {
							// fmt.Println("marks :", marks)
							// fmt.Println("ApiCallUrl :", responseDatas3.ApiCallUrl)
						} else {
							// countList := []int{}
							// countList = append(countList, marks)
							var oneObj = map[string]interface{}{
								"ApiCallUrl": responseDatas3.ApiCallUrl,
								"all":        marks,
								"max":        marks,
								"min":        marks,
								"times":      strconv.Itoa(marks),
								"gw":         strconv.Itoa(resgw),
								"count":      1,
								"maxgw":      resgw,
								"mingw":      resgw,
								"allgw":      resgw,
							}

							if resultObj[responseDatas3.ApiCallUrl] == nil {
								resultObj[responseDatas3.ApiCallUrl] = oneObj
							} else {
								tempObj := resultObj[responseDatas3.ApiCallUrl].(map[string]interface{})
								maxcount := tempObj["max"].(int)
								mincount := tempObj["min"].(int)
								maxcountgw := tempObj["maxgw"].(int)
								mincountgw := tempObj["mingw"].(int)
								numcount := tempObj["all"].(int) + marks
								numcountgw := tempObj["allgw"].(int) + resgw
								allcount := tempObj["count"].(int)
								allcount = allcount + 1

								testlist := tempObj["times"].(string)
								gwlist := tempObj["gw"].(string)

								//====================
								// urltext := strings.Split(responseDatas3.ApiCallUrl, "/")
								// fmt.Println("text 0 :", urltext[0])
								// fmt.Println("text 1 :", urltext[1])
								// fmt.Println("text 2 :", urltext[2])
								// fmt.Println("marks:", marks)
								// fmt.Println("resgw:", resgw)
								var straaa = []string{testlist, strconv.Itoa(marks)}
								testlist = strings.Join(straaa, ",")

								var strbbb = []string{gwlist, strconv.Itoa(resgw)}
								gwlist = strings.Join(strbbb, ",")

								// var buffer bytes.Buffer
								// buffer.WriteString(testlist)
								// buffer.WriteString(",")
								// buffer.WriteString(strconv.Itoa(marks))
								// testlist = buffer.String()

								// testlist = testlist + "," + strconv.Itoa(marks) //超慢

								// fmt.Println("testlist size :", testlist)
								fmt.Println("gwlist size :", len(gwlist))

								if marks > maxcount {
									maxcount = marks
								}
								if marks < mincount && marks >= 0 {
									mincount = marks
								}

								if resgw > maxcountgw {
									maxcountgw = resgw
								}
								if resgw < mincountgw && resgw >= 0 {
									mincountgw = resgw
								}

								var oneObj2 = map[string]interface{}{
									"ApiCallUrl": responseDatas3.ApiCallUrl,
									"all":        numcount,
									"max":        maxcount,
									"min":        mincount,
									"times":      testlist,
									"count":      allcount,
									"maxgw":      maxcountgw,
									"mingw":      mincountgw,
									"allgw":      numcountgw,
									"gw":         gwlist,
								}

								resultObj[responseDatas3.ApiCallUrl] = oneObj2
							}
						}

					}

					// fmt.Println(marks)

				}
				// }
				// fmt.Println("count :", str1[str1.l])

				// txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime, eventParameters}}
				// writer.WriteAll(txt)
			} else if name == "9" {
				if eventName == "error300Report" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, error300Report, eventParameters}}
					writer.WriteAll(txt)
				}
				// txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, error300Report, eventParameters}}
				// writer.WriteAll(txt)
			} else if name == "10" {
				// str1 := strings.Split(VersionInfo, ".")
				// strall := str1[len(str1)-1]
				// trimStr := strings.TrimSpace(strall)
				// marks2, err := strconv.Atoi(trimStr)
				// fmt.Println("marks2=", marks2)
				if err != nil {
					// fmt.Println("Error during conversion= ", err)
					// return
				}
				// fmt.Println("ver :", str1[len(str1)-1])
				// if marks2 >= 28 { //android
				// if marks2 >= 17 { //ios
				// if eventName == "ApiResponseTime" || eventName == "ServerResponseTime" {
				if eventName == "ServerResponseTime" {
					txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime, eventParameters}}
					writer.WriteAll(txt)

					var responseDatas3 model.ApiCallUrl
					err4 := json.Unmarshal([]byte(eventParameters), &responseDatas3)
					if err4 != nil {
						// fmt.Println(err3)
					}
					// fmt.Println("eventName=", eventName)
					// marksStr := "320"
					// marks, err := strconv.Atoi(responseDatas3.SubtractTime) //Android
					marks, err := strconv.Atoi(responseDatas3.Res_subtract) //iOS

					// fmt.Println("resgw= ", responseDatas3.Res_gw)
					resgw, err9 := strconv.Atoi(responseDatas3.Res_gw) //Android & iOS

					// fmt.Println("responseDatas3.ApiCallUrl= ", responseDatas3.ApiCallUrl)
					// fmt.Println("marks=", marks)
					if err != nil {
						// fmt.Println("Error during conversion")
						// return
					}
					if err9 != nil {
						// fmt.Println("Error during conversion")
						// return
					}

					if strings.Contains(responseDatas3.ApiCallUrl, "health") || strings.Contains(responseDatas3.ApiCallUrl, "stopService") {

					} else {
						if marks == 0 {
							// fmt.Println("marks :", marks)
							// fmt.Println("ApiCallUrl :", responseDatas3.ApiCallUrl)
						} else {
							// countList := []int{}
							// countList = append(countList, marks)
							var urltext = strings.Split(responseDatas3.ApiCallUrl, "/")
							var oneObj = map[string]interface{}{
								"ApiCallUrl": urltext[2],
								"all":        marks,
								"max":        marks,
								"min":        marks,
								"times":      strconv.Itoa(marks),
								"gw":         strconv.Itoa(resgw),
								"count":      1,
								"maxgw":      resgw,
								"mingw":      resgw,
								"allgw":      resgw,
							}

							if resultObj[urltext[2]] == nil {
								resultObj[urltext[2]] = oneObj
							} else {
								tempObj := resultObj[urltext[2]].(map[string]interface{})
								maxcount := tempObj["max"].(int)
								mincount := tempObj["min"].(int)
								maxcountgw := tempObj["maxgw"].(int)
								mincountgw := tempObj["mingw"].(int)
								numcount := tempObj["all"].(int) + marks
								numcountgw := tempObj["allgw"].(int) + resgw
								allcount := tempObj["count"].(int)
								allcount = allcount + 1

								testlist := tempObj["times"].(string)
								gwlist := tempObj["gw"].(string)

								//====================
								// urltext := strings.Split(responseDatas3.ApiCallUrl, "/")
								// fmt.Println("text 0 :", urltext[0])
								// fmt.Println("text 1 :", urltext[1])
								// fmt.Println("text 2 :", urltext[2])
								var straaa = []string{testlist, strconv.Itoa(marks)}
								testlist = strings.Join(straaa, ",")

								var strbbb = []string{gwlist, strconv.Itoa(resgw)}
								gwlist = strings.Join(strbbb, ",")

								// var buffer bytes.Buffer
								// buffer.WriteString(testlist)
								// buffer.WriteString(",")
								// buffer.WriteString(strconv.Itoa(marks))
								// testlist = buffer.String()

								// testlist = testlist + "," + strconv.Itoa(marks) //超慢

								// fmt.Println("testlist size :", testlist)
								// fmt.Println("text size :", urltext[2])
								fmt.Println("text size :", len(gwlist))

								if marks > maxcount {
									maxcount = marks
								}
								if marks < mincount && marks >= 0 {
									mincount = marks
								}

								if resgw > maxcountgw {
									maxcountgw = resgw
								}
								if resgw < mincountgw && resgw >= 0 {
									mincountgw = resgw
								}

								var oneObj2 = map[string]interface{}{
									"ApiCallUrl": urltext[2],
									"all":        numcount,
									"max":        maxcount,
									"min":        mincount,
									"times":      testlist,
									"count":      allcount,
									"maxgw":      maxcountgw,
									"mingw":      mincountgw,
									"allgw":      numcountgw,
									"gw":         gwlist,
								}

								resultObj[urltext[2]] = oneObj2
							}
						}

					}

					// fmt.Println(marks)

				}
				// }
				// fmt.Println("count :", str1[str1.l])

				// txt := [][]string{{Time, deviceIdentifiers, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, URL, Name, ApiResponseTime, eventParameters}}
				// writer.WriteAll(txt)
			} else {
				txt := [][]string{{Time, responseDatas2.Idfv, deviceModel, deviceSubModel, eventName, VersionInfo, UserID, DeviceID, CurrentLine, ApiSpeed, ContractSpeed, NetError, URL, Name, EventID, ApiCallTime, ApiResponseTime, error300Report, eventParameters}}
				writer.WriteAll(txt)
			}
		}
		count = count + 1
	}
	writer.Flush()
	file.Close()

	if Filecount == 0 {
		fmt.Println("找不到此 Userid :", uuid)
		err := os.Remove(filePaths + fileName) //删除文件
		if err != nil {
			//如果删除失败则输出 file remove Error!
			fmt.Println("File Remove Error!")
			//输出错误详细信息
			fmt.Printf("%s", err)
		} else {
			//如果删除成功则输出 file remove OK!
			fmt.Print("File Remove OK!")

		}
	}

	// fmt.Println("resultObj size :", len(resultObj))
	for k := range resultObj {
		testtxt := resultObj[k].(map[string]interface{})
		maxtxt := strconv.FormatInt(int64(testtxt["max"].(int)), 10)
		mintxt := strconv.FormatInt(int64(testtxt["min"].(int)), 10)
		maxtxtgw := strconv.FormatInt(int64(testtxt["maxgw"].(int)), 10)
		mintxtgw := strconv.FormatInt(int64(testtxt["mingw"].(int)), 10)
		counttxts := strconv.FormatInt(int64(testtxt["count"].(int)), 10)
		// averagetxt := testtxt["all"].(int) / testtxt["count"].(int)
		test := testtxt["times"].(string)
		strrr := strings.Split(test, ",")
		countList := []int{}
		for ccc := range strrr {
			// fmt.Println("ccc :", strrr[ccc])
			showtext, err := strconv.Atoi(strrr[ccc])
			if err != nil {
				// fmt.Println("Error during conversion")
			}
			countList = append(countList, showtext)
		}
		sort.Sort(sort.IntSlice(countList))

		var cclist float64 = float64(len(strrr))
		var y90 int = int(cclist * 0.90)
		var y95 int = int(cclist * 0.95)
		var y99 int = int(cclist * 0.99)
		ss90 := strconv.Itoa(countList[y90])
		ss95 := strconv.Itoa(countList[y95])
		ss99 := strconv.Itoa(countList[y99])
		//===============================
		testgw := testtxt["gw"].(string)
		strrrgw := strings.Split(testgw, ",")
		countListgw := []int{}
		for kkk := range strrrgw {
			// fmt.Println("ccc :", strrr[ccc])
			showtextgw, errr := strconv.Atoi(strrrgw[kkk])
			if errr != nil {
				// fmt.Println("Error during conversion")
			}
			countListgw = append(countListgw, showtextgw)
		}
		sort.Sort(sort.IntSlice(countListgw))

		var cclistgw float64 = float64(len(strrrgw))
		var gwy90 int = int(cclistgw * 0.90)
		var gwy95 int = int(cclistgw * 0.95)
		var gwy99 int = int(cclistgw * 0.99)
		gwss90 := strconv.Itoa(countListgw[gwy90])
		gwss95 := strconv.Itoa(countListgw[gwy95])
		gwss99 := strconv.Itoa(countListgw[gwy99])
		//===============================
		var xxapi float64 = float64(testtxt["all"].(int))
		var xx float64 = float64(testtxt["allgw"].(int))
		var yy float64 = float64(testtxt["count"].(int))
		averagetxt := xxapi / yy
		// averagetxt2 := strconv.FormatInt(int64(averagetxt), 10)
		averagetxt2 := fmt.Sprintf("%.2f", averagetxt)
		averagetxtgw := xx / yy
		averagetxt2gw := fmt.Sprintf("%.2f", averagetxtgw)
		txt2 := [][]string{{testtxt["ApiCallUrl"].(string), maxtxt, mintxt, averagetxt2, maxtxtgw, mintxtgw, averagetxt2gw, counttxts, ss90, ss95, ss99, gwss90, gwss95, gwss99}}
		// fmt.Println("txt2 :", txt2)
		writer2.WriteAll(txt2)
	}
	writer2.Flush()

}

func getWorkingDirPath() string { //開發模式路徑
	dir, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	// fmt.Println("workingDirPath:", dir)
	return dir
}

func getAbsPath() string {
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		panic(err)
	}
	// fmt.Println("absPath:", dir)
	return dir
}

func getExePath() string {
	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	exePath := filepath.Dir(ex)
	// fmt.Println("exePath:", exePath)
	return exePath
}

func checkNumber() {
	for {
		fmt.Printf("版本:1.0.15\n")
		fmt.Printf("請輸入要查詢的 UserId: ")
		fmt.Scanln(&uuid)

		if uuid != "" {
			break
		}
	}
	fmt.Println("查詢的 Userid:", uuid)
	for {
		fmt.Printf("1.LaunchTime\n2.NetError\n3.SocketError\n4.AndroidSpeed\n5.AppStatus\n6.onClick\n7.ApiCallTime\n8.ApiResponseTime\n9.error300Report\n10.Domain Speed\n")
		fmt.Printf("請輸入要輸出的類型號碼: ")
		fmt.Scanln(&name)

		if name != "" {
			break
		}
	}
	fmt.Println(name)
}

func checkFileName() {
	if name == "1" {
		fileName = "/LaunchTime_" + uuid + ".csv"
	}
	if name == "2" {
		fileName = "/NetError_" + uuid + ".csv"
	}
	if name == "3" {
		fileName = "/SocketError_" + uuid + ".csv"
	}
	if name == "4" {
		fileName = "/AndroidSpeed_" + uuid + ".csv"
	}
	if name == "5" {
		fileName = "/AppStatus_" + uuid + ".csv"
	}
	if name == "6" {
		fileName = "/onClick_" + uuid + ".csv"
	}
	if name == "7" {
		fileName = "/ApiCallTime_" + uuid + ".csv"
	}
	if name == "8" {
		fileName = "/ApiResponseTime_" + uuid + ".csv"
		fileName2 = "/weexrawlist" + ".csv"
	}
	if name == "9" {
		fileName = "/error300Report_" + uuid + ".csv"
	}
	if name == "10" {
		fileName = "/ApiResponseTime_" + uuid + ".csv"
		fileName2 = "/weexrawlist" + ".csv"
	}

	// ApiCallTime = "ApiCallTime"
	// ApiResponseTime = "ApiResponseTime"
	// error300Report = "error300Report"
}

func removeDuplicateElement(addrs []string) []string {
	result := make([]string, 0, len(addrs))
	temp := map[string]struct{}{}
	for _, item := range addrs {
		if _, ok := temp[item]; !ok {
			temp[item] = struct{}{}
			result = append(result, item)
		}
	}
	return result
}
